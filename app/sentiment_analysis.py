import time
import ollama
from utils import normalize, text_time
from dotenv import load_dotenv
import os

# Carregar vari√°veis de ambiente do arquivo .env
load_dotenv()

MODEL_NAME = os.getenv('MODEL_NAME')

def build_content(text):
    """Builds the content string for the sentiment analysis model."""
    return f'''
    Voc√™ √© um especialista em an√°lise de sentimentos. Analise o texto entre colchetes [ ] e atribua uma nota entre -1.0 e 1.0 que represente o sentimento expressado. Use -1.0 para sentimentos muito negativos e 1.0 para sentimentos muito positivos e 0 para sentimentos neutros.
    Tamb√©m atribua uma nota entre 0.0 e 1.0 o qu√£o confiante voc√™ est√° perante a nota que est√° dando para o sentimento.
    Aten√ß√£o: Utilize apenas uma casa decimal.

    Considere os seguintes aspectos lingu√≠sticos, com a porcentagem indicando a import√¢ncia de cada aspecto para a an√°lise de sentimento:

    L√©xico Emocional (25%)
    Identifique palavras que expressam sentimentos:
    Positivo: Palavras como "feliz", "excelente", "fant√°stico".
    Neutro: Palavras informativas, como "adequado", "mediano".
    Negativo: Palavras como "triste", "horr√≠vel", "fracasso".
    
    Contexto Lingu√≠stico (20%)
    Considere como o contexto altera o sentimento das palavras:
    Positivo: Uso de ironia positiva ("Claro que estou super feliz com isso!" expressando felicidade).
    Neutro: Ironia sem carga emocional significativa ("Muito t√≠pico").
    Negativo: Sarcasmo negativo ("Claro, isso foi t√£o √∫til" com inten√ß√£o negativa).
    
    Intensidade Emocional (15%)
    Avalie a for√ßa das emo√ß√µes no texto:
    Positivo: Intensificadores de emo√ß√µes positivas ("extremamente feliz").
    Neutro: Emo√ß√µes de pouca intensidade ("levemente contente").
    Negativo: Intensificadores de emo√ß√µes negativas ("completamente horr√≠vel").
   
    Sintaxe e Estrutura da Frase (10%)
    A constru√ß√£o da frase pode influenciar o sentimento:
    Positivo: Frases que transmitem satisfa√ß√£o ("Foi uma experi√™ncia incr√≠vel").
    Neutro: Frases descritivas e objetivas ("O evento ocorreu √†s 18 horas").
    Negativo: Frases que expressam frustra√ß√£o ("Isso foi um desperd√≠cio de tempo").
    
    Contexto Cultural e Temporal (10%)
    Considere o impacto cultural e temporal nas express√µes:
    Positivo: Termos com conota√ß√£o positiva em contextos atuais ("√©pico" significando algo muito bom).
    Neutro: Palavras com significado literal e neutro.
    Negativo: Termos com conota√ß√£o negativa ou desatualizada.
    
    Uso de Emojis e Emoticons (5%)
    Emojis podem modificar o tom emocional:
    Positivo: Emojis de felicidade ou aprova√ß√£o (üòä, üëç).
    Neutro: Emojis sem carga emocional significativa (üîÑ, üîç).
    Negativo: Emojis de tristeza ou desaprova√ß√£o (üòû, üëé).
    
    Marcadores Discursivos (5%)
    Identifique palavras que mudam o tom ou introduzem novas ideias:
    Positivo: Marcadores de emo√ß√£o positiva ("excelente").
    Neutro: Marcadores de transi√ß√£o ("no entanto").
    Negativo: Marcadores de desapontamento ("infelizmente").
    
    Polaridade e Multiplicidade de Sentimentos (5%)
    Detecte a presen√ßa de m√∫ltiplos sentimentos no texto:
    Positivo: Sentimentos positivos predominantes em contextos mistos.
    Neutro: Equil√≠brio ou ambiguidade emocional.
    Negativo: Sentimentos negativos predominantes.
    
    Refer√™ncias a Entidades Nomeadas e Relacionamentos (5%)
    O modo como entidades s√£o mencionadas pode alterar o sentimento:
    Positivo: Mencionar entidades de forma elogiosa ("A Apple fez um trabalho excelente").
    Neutro: Refer√™ncias neutras ou informativas.
    Negativo: Mencionar entidades de forma cr√≠tica ("O governo falhou miseravelmente").
    
    Estilo de Linguagem e Tom (5%)
    A tonalidade geral do texto pode impactar a percep√ß√£o emocional:
    Positivo: Linguagem otimista.
    Neutro: Estilo informativo ou descritivo.
    Negativo: Linguagem pessimista ou cr√≠tica.
    
    Objetividade e Neutralidade (5%)
    Avalie se o texto √© imparcial ou inclinado:
    Positivo: Fatos com leve inclina√ß√£o positiva.
    Neutro: Fatos estritamente objetivos.
    Negativo: Fatos com leve inclina√ß√£o negativa.
    
    Entona√ß√£o e Pros√≥dia (em Texto Falado) (5%)
    Considere como a entona√ß√£o pode influenciar o sentimento:
    Positivo: Entona√ß√£o alegre ou excitada.
    Neutro: Entona√ß√£o neutra e equilibrada.
    Negativo: Entona√ß√£o triste ou irritada.

    Formato de Retorno: Apenas numero com uma casa decimal, e o n√∫mero que representa os sentimentos e o numero que representa o qu√£o confiante est√° perante a nota do sentimento. por exemplo "0.2 0.9". 
    N√£o forne√ßa explica√ß√µes adicionais!!!.
    Caso n√£o haja nenhum texto para ser lido n√£o retorne nada!!!.

    Texto: [{text}]
    '''

def process_response(response, index, df, start):
    """Processes the response from the sentiment analysis model."""
    try:
        sentiment, confidence = normalize(response['message']['content'])
    except ValueError:
        return False

    end = time.time()
    df.at[index, 'sentiment'] = sentiment
    df.at[index, 'confidence'] = confidence
    df.at[index, 'time'] = float(f"{(end-start):.03f}")
    prefix = f"{index} : {len(df.index)}"
    print(f"{prefix} | Modelo: {response['message']['content'].replace("\n", "")} | Sentimento: {sentiment} | Confianca: {confidence} | {text_time(start, end)}")
    return True

def sentiment_analysis(text, index, df):
    """Performs sentiment analysis on the given text."""
    start = time.time()
    content = build_content(text)

    response = ollama.chat(
        MODEL_NAME,
        messages=[{'role': 'user', 'content': content}],
    )

    if not process_response(response, index, df, start):
        # Tentar reprocessar a linha
        response = ollama.chat(
            MODEL_NAME,
            messages=[{'role': 'user', 'content': content + ' retorne somente os numeros solicitados'}],
        )
        if not process_response(response, index, df, start):
            # Marcar a linha como n√£o processada
            df.at[index, 'error_sentiment'] = 1  # Converter explicitamente para int
            df.at[index, 'error_sentiment_value'] = response['message']['content']
            df.at[index, 'time'] = float(f"{(time.time() - start):.03f}")
            print(f"{index} : {len(df.index)} | Erro ao processar a linha. | {text_time(start, time.time())}")
            return 'N/A', 'N/A'

    return df.at[index, 'sentiment'], df.at[index, 'confidence']